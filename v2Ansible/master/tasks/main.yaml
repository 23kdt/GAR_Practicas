- name: "Installing Required Packages"
  apt:
    name:
    - "docker.io"
    - "iproute2"
    - "apt-transport-https"
    - "curl"
    update_cache: yes
    state: present

- name: "Adding Kubernetes APT Key"
  apt_key:
    url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    state: present

- name: "Adding Kubernetes APT Repository"
  apt_repository:
    repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main"
    state: present

- name: "Installing Kubeadm, Kubelet, and Kubectl"
  apt:
    name: [ 'kubelet', 'kubeadm', 'kubectl' ]
    state: present
    update_cache: yes

- name: Ensure br_netfilter is enabled.
  modprobe:
    name: br_netfilter
    state: present

- name: update kernel settings
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_set: yes
    state: present
    reload: yes

- name: "Copy Daemon file to change the Docker's cgroup Driver"
  copy:
    src: daemon.json
    dest: "/etc/docker/daemon.json"

- name: "Starting Docker Service"
  service:
    name: "docker"
    state: started
    enabled: yes

- name: "Starting Kubelet Service"
  service:
    name: "kubelet"
    state: started
    enabled: yes

- name: "Initializing the Kubernetes cluser on Master Node"
  command: "kubeadm init --pod-network-cidr={{ pod_cidr_network }} --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem"
  ignore_errors: True

- name: "Configuration Files Setup"
  file:
    path: "$HOME/.kube"
    state: directory

- name: "Copying Configuration File"
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "$HOME/.kube/config"
    remote_src: yes

- name: Change kubeconfig file permission
  file:
    path: "$HOME/.kube/config"
    owner: "{{ ansible_env.SUDO_UID }}"
    group: "{{ ansible_env.SUDO_GID }}"

- name: Ejecutar swapoff -a
  shell: sudo swapoff -a

- name: "Downloading CNI Plugin"
  command: "kubectl apply  -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
  ignore_errors: True

- name: "THE JOIN TOKEN"
  command: "kubeadm token create --print-join-command"
  register: x
  ignore_errors: True

- name: "Storing Token"
  local_action: copy content={{ x.stdout }} dest=/tmp/token
